name: Python Linting and Auto-fix

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lint-and-fix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Codestyle dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint autopep8 black

    - name: Configure Git
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'

    - name: Run pylint and auto-fix with autopep8
      run: |
        FILES=$(git diff --name-only --diff-filter=ACMRTUXB HEAD^ HEAD | grep '\.py$' || true)
        
        if [ -n "$FILES" ]; then
          echo "Running autopep8 on modified files..."
          echo "$FILES" | xargs autopep8 --in-place --aggressive --aggressive
          
          # Run black for consistent formatting
          echo "Running black on modified files..."
          echo "$FILES" | xargs black --line-length 120
          
          # Stage changes
          git add $FILES
          
          # Check if there are changes to commit
          if ! git diff --staged --quiet; then
            git commit -m "style: auto-fix linting issues"
            git push
          else
            echo "No linting fixes to commit."
          fi
        else
          echo "No Python files to lint."
        fi

    - name: Run pylint analysis
      id: pylint
      continue-on-error: true
      run: |
        # Run pylint and capture the score
        SCORE=$(pylint --exit-zero $(git ls-files '*.py') | grep -oP '(?<=Your code has been rated at ).*?(?=/10)' || true)
        
        # If no score is found, default to 0
        if [ -z "$SCORE" ]; then
          echo "No pylint score generated. Setting to 0."
          SCORE=0
        fi
        
        # Set the score as an output
        echo "score=$SCORE" >> $GITHUB_OUTPUT
        
        # Check if score is below threshold (8.0)
        if (( $(echo "$SCORE < 8.0" | bc -l) )); then
          echo "::error::Pylint score of $SCORE/10 is below the required minimum of 8.0"
          exit 1
        else
          echo "Pylint score of $SCORE/10 meets the minimum requirement of 8.0"
        fi
    
    - name: Check pylint score
      if: steps.pylint.outcome == 'failure'
      run: |
        echo "Pylint score check failed. Please fix the issues to meet the minimum score of 8.0."
        exit 1
